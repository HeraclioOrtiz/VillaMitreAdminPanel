#!/bin/bash

# üîÑ SCRIPT DE TESTING CONTINUO - Villa Mitre Admin Panel
# Este script ejecuta tests en modo watch para desarrollo activo

echo "üîÑ Iniciando testing continuo para desarrollo..."
echo "=============================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Funci√≥n para mostrar men√∫
show_menu() {
    echo ""
    echo "üéØ OPCIONES DE TESTING CONTINUO"
    echo "==============================="
    echo "1. üß™ Tests unitarios en watch mode"
    echo "2. üîó Tests de integraci√≥n en watch mode"
    echo "3. üåê Tests E2E en modo UI"
    echo "4. üìä Cobertura en tiempo real"
    echo "5. ‚ö° Performance monitoring"
    echo "6. üé® Tests de componentes espec√≠ficos"
    echo "7. üì± Tests responsive en tiempo real"
    echo "8. üîç Tests de un feature espec√≠fico"
    echo "9. üöÄ Todos los tests en paralelo"
    echo "0. ‚ùå Salir"
    echo ""
    read -p "Selecciona una opci√≥n (0-9): " choice
}

# Funci√≥n para tests unitarios en watch
unit_tests_watch() {
    log "Iniciando tests unitarios en modo watch..."
    success "Presiona 'q' para salir del modo watch"
    npm run test:watch
}

# Funci√≥n para tests de integraci√≥n en watch
integration_tests_watch() {
    log "Iniciando tests de integraci√≥n en modo watch..."
    success "Los tests se ejecutar√°n autom√°ticamente al cambiar archivos"
    npm run test:integration -- --watch
}

# Funci√≥n para tests E2E con UI
e2e_tests_ui() {
    log "Iniciando tests E2E con interfaz visual..."
    success "Se abrir√° la interfaz de Playwright"
    npm run test:e2e:ui
}

# Funci√≥n para cobertura en tiempo real
coverage_watch() {
    log "Iniciando monitoreo de cobertura en tiempo real..."
    success "La cobertura se actualizar√° autom√°ticamente"
    npm run test:coverage -- --watch --reporter=verbose
}

# Funci√≥n para performance monitoring
performance_monitoring() {
    log "Iniciando monitoreo de performance..."
    
    # Crear script de monitoreo
    cat > temp-performance-monitor.js << 'EOF'
const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîç Monitoreando performance...');

setInterval(() => {
    try {
        // Ejecutar lighthouse en modo headless
        const result = execSync('lighthouse http://localhost:5173 --only-categories=performance --output=json --quiet', 
            { encoding: 'utf8' });
        
        const report = JSON.parse(result);
        const score = Math.round(report.lhr.categories.performance.score * 100);
        
        const timestamp = new Date().toLocaleTimeString();
        console.log(`[${timestamp}] Performance Score: ${score}/100`);
        
        // Alertar si el score baja mucho
        if (score < 80) {
            console.log('‚ö†Ô∏è  Performance score bajo detectado!');
        }
        
    } catch (error) {
        console.log('‚ùå Error en monitoreo de performance');
    }
}, 30000); // Cada 30 segundos
EOF

    node temp-performance-monitor.js
}

# Funci√≥n para tests de componentes espec√≠ficos
component_tests() {
    echo ""
    echo "üé® TESTS DE COMPONENTES ESPEC√çFICOS"
    echo "=================================="
    echo "1. Button component"
    echo "2. DataTable component"
    echo "3. Toast system"
    echo "4. UserActions component"
    echo "5. ExerciseCard component"
    echo "6. Modal component"
    echo "7. Todos los componentes UI"
    echo ""
    read -p "Selecciona componente (1-7): " comp_choice
    
    case $comp_choice in
        1) npm run test:watch -- Button.test.tsx ;;
        2) npm run test:watch -- DataTable.test.tsx ;;
        3) npm run test:watch -- Toast.test.tsx ;;
        4) npm run test:watch -- UserActions.test.tsx ;;
        5) npm run test:watch -- ExerciseCard.test.tsx ;;
        6) npm run test:watch -- Modal.test.tsx ;;
        7) npm run test:watch -- src/test/unit/components/ui ;;
        *) error "Opci√≥n inv√°lida" ;;
    esac
}

# Funci√≥n para tests responsive
responsive_tests() {
    log "Iniciando tests responsive en tiempo real..."
    
    # Crear script de tests responsive
    cat > temp-responsive-test.js << 'EOF'
const { chromium } = require('playwright');

async function testResponsive() {
    const browser = await chromium.launch({ headless: false });
    const context = await browser.newContext();
    const page = await context.newPage();
    
    const viewports = [
        { width: 375, height: 667, name: 'Mobile' },
        { width: 768, height: 1024, name: 'Tablet' },
        { width: 1024, height: 768, name: 'Tablet Landscape' },
        { width: 1440, height: 900, name: 'Desktop' },
        { width: 1920, height: 1080, name: 'Large Desktop' }
    ];
    
    for (const viewport of viewports) {
        console.log(`üì± Testing ${viewport.name} (${viewport.width}x${viewport.height})`);
        
        await page.setViewportSize({ width: viewport.width, height: viewport.height });
        await page.goto('http://localhost:5173');
        await page.waitForLoadState('networkidle');
        
        // Screenshot para cada viewport
        await page.screenshot({ 
            path: `screenshots/responsive-${viewport.name.toLowerCase().replace(' ', '-')}.png`,
            fullPage: true 
        });
        
        await page.waitForTimeout(2000);
    }
    
    await browser.close();
    console.log('‚úÖ Tests responsive completados. Screenshots guardados en /screenshots');
}

testResponsive().catch(console.error);
EOF

    # Crear directorio de screenshots
    mkdir -p screenshots
    node temp-responsive-test.js
}

# Funci√≥n para tests de feature espec√≠fico
feature_tests() {
    echo ""
    echo "üîç TESTS DE FEATURE ESPEC√çFICO"
    echo "============================="
    echo "1. üë• User Management (MICROPASO 17-21)"
    echo "2. üí™ Exercise System (MICROPASO 8-16)"
    echo "3. üìã Template System (MICROPASO 8-13)"
    echo "4. üé® UI Components (MICROPASO 1-7)"
    echo "5. üîß Performance System (MICROPASO 16)"
    echo ""
    read -p "Selecciona feature (1-5): " feature_choice
    
    case $feature_choice in
        1) 
            log "Testing User Management System..."
            npm run test:watch -- "src/test/unit/components/admin|src/test/unit/hooks/useUsers|src/test/e2e/user-management"
            ;;
        2) 
            log "Testing Exercise System..."
            npm run test:watch -- "src/test/unit/components/gym|src/test/unit/hooks/useExercises|src/test/e2e/exercise-management"
            ;;
        3) 
            log "Testing Template System..."
            npm run test:watch -- "src/test/unit/components/gym.*Template|src/test/unit/hooks/useTemplates"
            ;;
        4) 
            log "Testing UI Components..."
            npm run test:watch -- "src/test/unit/components/ui"
            ;;
        5) 
            log "Testing Performance Optimizations..."
            npm run test:watch -- "src/test/unit/performance"
            ;;
        *) error "Opci√≥n inv√°lida" ;;
    esac
}

# Funci√≥n para todos los tests en paralelo
all_tests_parallel() {
    log "Iniciando todos los tests en paralelo..."
    warning "Esto puede consumir muchos recursos del sistema"
    
    # Ejecutar en background
    npm run test:watch &
    UNIT_PID=$!
    
    npm run test:e2e:ui &
    E2E_PID=$!
    
    # Funci√≥n para cleanup
    cleanup() {
        log "Deteniendo todos los procesos..."
        kill $UNIT_PID 2>/dev/null
        kill $E2E_PID 2>/dev/null
        exit 0
    }
    
    # Trap para cleanup
    trap cleanup SIGINT SIGTERM
    
    success "Tests ejecut√°ndose en paralelo. Presiona Ctrl+C para detener."
    wait
}

# Funci√≥n principal
main() {
    # Verificar que estamos en el directorio correcto
    if [ ! -f "package.json" ]; then
        error "Este script debe ejecutarse desde el directorio ra√≠z del proyecto"
        exit 1
    fi
    
    # Verificar que las dependencias est√°n instaladas
    if [ ! -d "node_modules" ]; then
        warning "Dependencias no encontradas. Instalando..."
        npm install
    fi
    
    # Loop principal
    while true; do
        show_menu
        
        case $choice in
            1) unit_tests_watch ;;
            2) integration_tests_watch ;;
            3) e2e_tests_ui ;;
            4) coverage_watch ;;
            5) performance_monitoring ;;
            6) component_tests ;;
            7) responsive_tests ;;
            8) feature_tests ;;
            9) all_tests_parallel ;;
            0) 
                success "¬°Hasta luego! üëã"
                # Cleanup archivos temporales
                rm -f temp-*.js
                exit 0
                ;;
            *) error "Opci√≥n inv√°lida. Por favor selecciona 0-9." ;;
        esac
        
        echo ""
        read -p "Presiona Enter para volver al men√∫ principal..."
    done
}

# Cleanup al salir
cleanup_on_exit() {
    rm -f temp-*.js
}
trap cleanup_on_exit EXIT

# Ejecutar funci√≥n principal
main
